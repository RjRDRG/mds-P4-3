
model UberRide

-- classes

class Trip
attributes
  restaurantID : String
  Distance : Integer
  car : Car
  price : Integer
  locationId : String
operations
  chooseCar(modelType : String)
end

class Location
attributes
  cars : Set(Car)
  bikes : Set(Bike)
  locationId : String
operations
  removeBike(bikeId : String)
end

class Bike
attributes
  bikeId : String
end

class Car
attributes
  modelType : String
  carId : String
end

--association
association TripFromLocation between
	Location[1]
	Trip[*]
end


--constraints

constraints

context Trip
	inv NoCarOnMultipleTrips:
		Trip.allInstances->forAll(t1, t2 | 
		  not(t1.car.carId = t2.car.carId)
		)
	inv AtLeastOneCarOnLocation:
		Location.allInstances->forAll(l |
			l.locationId = self.locationId implies(
				l.cars -> notEmpty()
			)
		)
		

context Location
	inv NoBikeOnTwoLocations:
		Location.allInstances->forAll(l1,l2 |
		l1.bikes->intersection(l2.bikes)->isEmpty()
		)

context Trip::chooseCar(modelType : String)
	pre modelIsAvailable: Location.allInstances->forAll(l |
			l.locationId = self.locationId implies(
				l.cars->one(c |
					c.modelType=modelType
				)
			)
		)
	
context Location::removeBike(bikeId : String)
	post removedBike: self.bikes->forAll(b |
		not(b.bikeId = bikeId)
	)